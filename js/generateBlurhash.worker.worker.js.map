{"version":3,"file":"js/generateBlurhash.worker.worker.js","mappings":"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","sources":["webpack://web-story-creation-tool/./node_modules/blurhash/src/base83.ts","webpack://web-story-creation-tool/./node_modules/blurhash/src/utils.ts","webpack://web-story-creation-tool/./node_modules/blurhash/src/error.ts","webpack://web-story-creation-tool/./node_modules/blurhash/src/encode.ts","webpack://web-story-creation-tool/./packages/story-editor/src/utils/generateBlurhash.worker.js"],"sourcesContent":["const digitCharacters = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"*\",\n  \"+\",\n  \",\",\n  \"-\",\n  \".\",\n  \":\",\n  \";\",\n  \"=\",\n  \"?\",\n  \"@\",\n  \"[\",\n  \"]\",\n  \"^\",\n  \"_\",\n  \"{\",\n  \"|\",\n  \"}\",\n  \"~\"\n];\n\nexport const decode83 = (str: String) => {\n  let value = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n    const digit = digitCharacters.indexOf(c);\n    value = value * 83 + digit;\n  }\n  return value;\n};\n\nexport const encode83 = (n: number, length: number): string => {\n  var result = \"\";\n  for (let i = 1; i <= length; i++) {\n    let digit = (Math.floor(n) / Math.pow(83, length - i)) % 83;\n    result += digitCharacters[Math.floor(digit)];\n  }\n  return result;\n};\n","export const sRGBToLinear = (value: number) => {\n  let v = value / 255;\n  if (v <= 0.04045) {\n    return v / 12.92;\n  } else {\n    return Math.pow((v + 0.055) / 1.055, 2.4);\n  }\n};\n\nexport const linearTosRGB = (value: number) => {\n  let v = Math.max(0, Math.min(1, value));\n  if (v <= 0.0031308) {\n    return Math.round(v * 12.92 * 255 + 0.5);\n  } else {\n    return Math.round((1.055 * Math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5);\n  }\n};\n\nexport const sign = (n: number) => (n < 0 ? -1 : 1);\n\nexport const signPow = (val: number, exp: number) =>\n  sign(val) * Math.pow(Math.abs(val), exp);\n","export class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ValidationError\";\n    this.message = message;\n  }\n}\n","import { encode83 } from \"./base83\";\nimport { sRGBToLinear, signPow, linearTosRGB } from \"./utils\";\nimport { ValidationError } from \"./error\";\n\ntype NumberTriplet = [number, number, number];\n\nconst bytesPerPixel = 4;\n\nconst multiplyBasisFunction = (\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number,\n  basisFunction: (i: number, j: number) => number\n): NumberTriplet => {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  const bytesPerRow = width * bytesPerPixel;\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const basis = basisFunction(x, y);\n      r +=\n        basis * sRGBToLinear(pixels[bytesPerPixel * x + 0 + y * bytesPerRow]);\n      g +=\n        basis * sRGBToLinear(pixels[bytesPerPixel * x + 1 + y * bytesPerRow]);\n      b +=\n        basis * sRGBToLinear(pixels[bytesPerPixel * x + 2 + y * bytesPerRow]);\n    }\n  }\n\n  let scale = 1 / (width * height);\n\n  return [r * scale, g * scale, b * scale];\n};\n\nconst encodeDC = (value: NumberTriplet): number => {\n  const roundedR = linearTosRGB(value[0]);\n  const roundedG = linearTosRGB(value[1]);\n  const roundedB = linearTosRGB(value[2]);\n  return (roundedR << 16) + (roundedG << 8) + roundedB;\n};\n\nconst encodeAC = (value: NumberTriplet, maximumValue: number): number => {\n  let quantR = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[0] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n  let quantG = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[1] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n  let quantB = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[2] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n\n  return quantR * 19 * 19 + quantG * 19 + quantB;\n};\n\nconst encode = (\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number,\n  componentX: number,\n  componentY: number\n): string => {\n  if (componentX < 1 || componentX > 9 || componentY < 1 || componentY > 9) {\n    throw new ValidationError(\"BlurHash must have between 1 and 9 components\");\n  }\n  if (width * height * 4 !== pixels.length) {\n    throw new ValidationError(\"Width and height must match the pixels array\");\n  }\n\n  let factors: Array<[number, number, number]> = [];\n  for (let y = 0; y < componentY; y++) {\n    for (let x = 0; x < componentX; x++) {\n      const normalisation = x == 0 && y == 0 ? 1 : 2;\n      const factor = multiplyBasisFunction(\n        pixels,\n        width,\n        height,\n        (i: number, j: number) =>\n          normalisation *\n          Math.cos((Math.PI * x * i) / width) *\n          Math.cos((Math.PI * y * j) / height)\n      );\n      factors.push(factor);\n    }\n  }\n\n  const dc = factors[0];\n  const ac = factors.slice(1);\n\n  let hash = \"\";\n\n  let sizeFlag = componentX - 1 + (componentY - 1) * 9;\n  hash += encode83(sizeFlag, 1);\n\n  let maximumValue: number;\n  if (ac.length > 0) {\n    let actualMaximumValue = Math.max(...ac.map(val => Math.max(...val)));\n    let quantisedMaximumValue = Math.floor(\n      Math.max(0, Math.min(82, Math.floor(actualMaximumValue * 166 - 0.5)))\n    );\n    maximumValue = (quantisedMaximumValue + 1) / 166;\n    hash += encode83(quantisedMaximumValue, 1);\n  } else {\n    maximumValue = 1;\n    hash += encode83(0, 1);\n  }\n\n  hash += encode83(encodeDC(dc), 4);\n\n  ac.forEach(factor => {\n    hash += encode83(encodeAC(factor, maximumValue), 2);\n  });\n\n  return hash;\n};\n\nexport default encode;\n","/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * External dependencies\n */\nimport { encode } from 'blurhash';\n\nconst callback = function (event) {\n  const { image, width, height, componentX, componentY } = event.data;\n\n  try {\n    const blurHash = encode(image, width, height, componentX, componentY);\n    postMessage({\n      type: 'success',\n      blurHash,\n    });\n  } catch (error) {\n    postMessage({\n      type: 'error',\n      error,\n    });\n  }\n};\n\nself.onmessage = callback;\n\n// Only needed for Rollup, not webpack v4.\nexport default { callback };\n"],"names":["digitCharacters","encode83","n","length","result","i","digit","Math","floor","pow","sRGBToLinear","value","v","linearTosRGB","max","min","round","signPow","val","exp","abs","ValidationError","Error","constructor","message","super","this","name","multiplyBasisFunction","pixels","width","height","basisFunction","r","g","b","bytesPerRow","x","y","basis","scale","self","onmessage","event","image","componentX","componentY","data","blurHash","factors","normalisation","factor","j","cos","PI","push","dc","ac","slice","maximumValue","hash","actualMaximumValue","map","quantisedMaximumValue","forEach","encodeAC","encode","postMessage","type","error"],"sourceRoot":""}