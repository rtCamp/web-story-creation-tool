(()=>{"use strict";const t=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","#","$","%","*","+",",","-",".",":",";","=","?","@","[","]","^","_","{","|","}","~"],a=(a,o)=>{var e="";for(let h=1;h<=o;h++){let r=Math.floor(a)/Math.pow(83,o-h)%83;e+=t[Math.floor(r)]}return e},o=t=>{let a=t/255;return a<=.04045?a/12.92:Math.pow((a+.055)/1.055,2.4)},e=t=>{let a=Math.max(0,Math.min(1,t));return a<=.0031308?Math.round(12.92*a*255+.5):Math.round(255*(1.055*Math.pow(a,1/2.4)-.055)+.5)},h=(t,a)=>(t<0?-1:1)*Math.pow(Math.abs(t),a);class r extends Error{constructor(t){super(t),this.name="ValidationError",this.message=t}}const s=(t,a,e,h)=>{let r=0,s=0,n=0;const M=4*a;for(let l=0;l<a;l++)for(let a=0;a<e;a++){const e=h(l,a);r+=e*o(t[4*l+0+a*M]),s+=e*o(t[4*l+1+a*M]),n+=e*o(t[4*l+2+a*M])}let l=1/(a*e);return[r*l,s*l,n*l]};self.onmessage=function(t){const{image:o,width:n,height:M,componentX:l,componentY:c}=t.data;try{const t=((t,o,n,M,l)=>{if(M<1||M>9||l<1||l>9)throw new r("BlurHash must have between 1 and 9 components");if(o*n*4!==t.length)throw new r("Width and height must match the pixels array");let c=[];for(let a=0;a<l;a++)for(let e=0;e<M;e++){const h=0==e&&0==a?1:2,r=s(t,o,n,((t,r)=>h*Math.cos(Math.PI*e*t/o)*Math.cos(Math.PI*a*r/n)));c.push(r)}const m=c[0],f=c.slice(1);let i,u="";if(u+=a(M-1+9*(l-1),1),f.length>0){let t=Math.max(...f.map((t=>Math.max(...t)))),o=Math.floor(Math.max(0,Math.min(82,Math.floor(166*t-.5))));i=(o+1)/166,u+=a(o,1)}else i=1,u+=a(0,1);var p;return u+=a((e((p=m)[0])<<16)+(e(p[1])<<8)+e(p[2]),4),f.forEach((t=>{u+=a(((t,a)=>19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*h(t[0]/a,.5)+9.5))))*19+19*Math.floor(Math.max(0,Math.min(18,Math.floor(9*h(t[1]/a,.5)+9.5))))+Math.floor(Math.max(0,Math.min(18,Math.floor(9*h(t[2]/a,.5)+9.5)))))(t,i),2)})),u})(o,n,M,l,c);postMessage({type:"success",blurHash:t})}catch(t){postMessage({type:"error",error:t})}}})();
//# sourceMappingURL=generateBlurhash.worker.worker.js.map